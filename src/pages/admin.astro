---
import Layout from '../layouts/Layout.astro';

const pages = [
  {
    category: 'Homepage',
    items: [
      { name: 'Homepage', url: '/', status: 'ready' }
    ]
  },
  {
    category: 'Static Pages',
    items: [
      { name: 'About', url: '/about', status: 'ready' },
      { name: 'Contact', url: '/contact', status: 'ready' },
      { name: 'Resources', url: '/resources', status: 'ready' },
      { name: 'Privacy Policy', url: '/privacy', status: 'ready' },
      { name: 'Terms of Service', url: '/terms', status: 'ready' }
    ]
  },
  {
    category: 'Product Categories',
    items: [
      { name: 'Hand Sanitizers', url: '/hand-sanitizers', status: 'ready' },
      { name: 'Surface Sanitizers', url: '/surface-sanitizers', status: 'ready' },
      { name: 'Floor Sanitizers', url: '/floor-sanitizers', status: 'ready' },
      { name: 'Disinfectant Wipes', url: '/disinfectant-wipes', status: 'ready' },
      { name: 'Dispensers', url: '/dispensers', status: 'ready' },
      { name: 'Peracetic Acid', url: '/peracetic-acid', status: 'ready' },
      { name: 'Industrial Hand Soap', url: '/industrial-hand-soap', status: 'ready' }
    ]
  },
  {
    category: 'Industry Pages',
    items: [
      { name: 'Food Processing', url: '/industries/food-processing', status: 'ready' },
      { name: 'Food Service', url: '/industries/food-service', status: 'ready' },
      { name: 'Commercial Kitchens', url: '/industries/commercial-kitchens', status: 'ready' },
      { name: 'Janitorial & Sanitation', url: '/industries/janitorial-sanitation', status: 'ready' },
      { name: 'Industrial Hygiene', url: '/industries/industrial-hygiene', status: 'ready' },
      { name: 'Education', url: '/industries/education', status: 'ready' }
    ]
  },
  {
    category: 'Blog',
    items: [
      { name: 'Blog Listing', url: '/blog', status: 'ready' },
      { name: 'Sample Blog Post', url: '/blog/commercial-disinfectants-guide', status: 'template' }
    ]
  },
  {
    category: 'Product Pages (Templates)',
    items: [
      { name: 'Sample Product', url: '/product/alpet-d2-surface-sanitizer', status: 'template', note: 'Will be populated from Sanity' }
    ]
  },
  {
    category: 'Components to Review',
    items: [
      { name: 'Header Navigation', url: '/', status: 'review', note: 'Check mobile menu and navigation' },
      { name: 'Footer', url: '/', status: 'review', note: 'Check all links and badges' },
      { name: 'FAQ Section', url: '/#faq-section', status: 'review', note: 'Accordion functionality' },
      { name: 'Product Category Grid', url: '/', status: 'review', note: 'Scroll down to products section' },
      { name: 'Industry Section', url: '/', status: 'review', note: 'Check icons and links' }
    ]
  }
];
---

<Layout title="Admin - Page Checklist | D2 Sanitizers" description="Admin page for reviewing all site pages">
  <main class="py-16 md:py-24 bg-gray-50 min-h-screen">
    <div class="container mx-auto px-6 max-w-6xl">
      <div class="bg-white rounded-2xl shadow-xl p-8 mb-8">
        <h1 class="font-heading font-bold text-4xl md:text-5xl text-navy mb-4">
          D2 Sanitizers - Page Checklist
        </h1>
        <p class="text-gray-700 mb-6">
          Click the links to review each page. Use the checkboxes to track your progress.
        </p>

        <div class="flex flex-wrap gap-4 mb-8">
          <div class="flex items-center gap-2 bg-green-100 px-4 py-2 rounded-lg">
            <div class="w-3 h-3 bg-green-500 rounded-full"></div>
            <span class="text-sm font-bold text-green-800">Ready = Page Complete</span>
          </div>
          <div class="flex items-center gap-2 bg-blue-100 px-4 py-2 rounded-lg">
            <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
            <span class="text-sm font-bold text-blue-800">Template = Needs Sanity</span>
          </div>
          <div class="flex items-center gap-2 bg-yellow-100 px-4 py-2 rounded-lg">
            <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
            <span class="text-sm font-bold text-yellow-800">Review = Check functionality</span>
          </div>
        </div>

        <div class="flex flex-wrap gap-4 mb-8">
          <button
            id="check-all"
            class="px-6 py-2 bg-primary text-white font-bold rounded-lg hover:bg-cyan transition-colors duration-300"
          >
            Check All
          </button>
          <button
            id="uncheck-all"
            class="px-6 py-2 bg-gray-300 text-navy font-bold rounded-lg hover:bg-gray-400 transition-colors duration-300"
          >
            Uncheck All
          </button>
          <button
            id="save-progress"
            class="px-6 py-2 bg-navy text-white font-bold rounded-lg hover:bg-gray-800 transition-colors duration-300"
          >
            Save Progress
          </button>
          <button
            id="export-notes"
            class="px-6 py-2 bg-cyan text-navy font-bold rounded-lg hover:bg-primary hover:text-white transition-colors duration-300"
          >
            Export Notes
          </button>
        </div>

        <div id="progress-bar" class="mb-8">
          <div class="flex justify-between text-sm text-gray-700 mb-2">
            <span>Progress</span>
            <span id="progress-text">0 of {pages.reduce((sum, cat) => sum + cat.items.length, 0)} pages reviewed</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-4">
            <div id="progress-fill" class="bg-primary h-4 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>
      </div>

      {pages.map((section) => (
        <div class="bg-white rounded-xl shadow-lg p-8 mb-6">
          <h2 class="font-heading font-bold text-2xl md:text-3xl text-navy mb-6 border-b-2 border-primary pb-3">
            {section.category}
          </h2>
          <div class="space-y-3">
            {section.items.map((page, index) => {
              const statusColors = {
                ready: 'bg-green-100 text-green-800',
                template: 'bg-blue-100 text-blue-800',
                review: 'bg-yellow-100 text-yellow-800'
              };
              const statusDots = {
                ready: 'bg-green-500',
                template: 'bg-blue-500',
                review: 'bg-yellow-500'
              };
              const pageId = `page-${section.category.replace(/\s+/g, '-')}-${index}`;

              return (
                <div class="page-item p-4 rounded-lg hover:bg-gray-50 transition-colors duration-200 border border-gray-200">
                  <div class="flex items-start gap-4 mb-3">
                    <input
                      type="checkbox"
                      id={pageId}
                      class="page-checkbox w-5 h-5 text-primary focus:ring-2 focus:ring-primary rounded cursor-pointer mt-1"
                      data-page={page.url}
                    />
                    <div class="flex-1">
                      <div class="flex items-center gap-3 mb-1">
                        <a
                          href={page.url}
                          target="_blank"
                          class="text-lg font-bold text-primary hover:text-cyan transition-colors duration-200"
                        >
                          {page.name} →
                        </a>
                        <div class={`flex items-center gap-1.5 px-3 py-1 rounded-full text-xs font-bold ${statusColors[page.status]}`}>
                          <div class={`w-2 h-2 rounded-full ${statusDots[page.status]}`}></div>
                          {page.status.toUpperCase()}
                        </div>
                      </div>
                      <p class="text-sm text-gray-600 mb-2">
                        <code class="bg-gray-100 px-2 py-1 rounded text-xs">{page.url}</code>
                        {page.note && <span class="ml-2 text-gray-500 italic">• {page.note}</span>}
                      </p>
                    </div>
                  </div>
                  <div class="ml-9">
                    <textarea
                      class="note-textarea w-full px-3 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
                      placeholder="Add notes for review..."
                      rows="2"
                      data-page={page.url}
                    ></textarea>
                    <div class="saved-indicator hidden text-xs text-green-600 mt-1">
                      ✓ Note saved
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      ))}

      <div class="bg-navy rounded-xl shadow-lg p-8 text-white">
        <h2 class="font-heading font-bold text-2xl md:text-3xl mb-4">
          Next Steps
        </h2>
        <ul class="space-y-3">
          <li class="flex items-start gap-3">
            <span class="text-cyan font-bold">1.</span>
            <span>Review all pages and check them off as you approve the design</span>
          </li>
          <li class="flex items-start gap-3">
            <span class="text-cyan font-bold">2.</span>
            <span>Upload actual product images to Cloudinary (d2-sanitizers/products/)</span>
          </li>
          <li class="flex items-start gap-3">
            <span class="text-cyan font-bold">3.</span>
            <span>Upload category images to Cloudinary (d2-sanitizers/categories/)</span>
          </li>
          <li class="flex items-start gap-3">
            <span class="text-cyan font-bold">4.</span>
            <span>Configure Sanity CMS and add product/blog content</span>
          </li>
          <li class="flex items-start gap-3">
            <span class="text-cyan font-bold">5.</span>
            <span>Update placeholder content with actual copy</span>
          </li>
          <li class="flex items-start gap-3">
            <span class="text-cyan font-bold">6.</span>
            <span>Integrate Shopify for e-commerce functionality</span>
          </li>
        </ul>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const checkboxes = document.querySelectorAll('.page-checkbox') as NodeListOf<HTMLInputElement>;
    const noteTextareas = document.querySelectorAll('.note-textarea') as NodeListOf<HTMLTextAreaElement>;
    const progressBar = document.getElementById('progress-fill') as HTMLElement;
    const progressText = document.getElementById('progress-text') as HTMLElement;
    const checkAllBtn = document.getElementById('check-all') as HTMLButtonElement;
    const uncheckAllBtn = document.getElementById('uncheck-all') as HTMLButtonElement;
    const saveProgressBtn = document.getElementById('save-progress') as HTMLButtonElement;
    const exportNotesBtn = document.getElementById('export-notes') as HTMLButtonElement;

    const totalPages = checkboxes.length;
    let noteTimers: Record<string, NodeJS.Timeout> = {};

    // Load saved progress
    function loadProgress() {
      const saved = localStorage.getItem('d2-page-progress');
      if (saved) {
        const checkedPages = JSON.parse(saved);
        checkboxes.forEach(checkbox => {
          if (checkedPages.includes(checkbox.dataset.page)) {
            checkbox.checked = true;
          }
        });
      }
      updateProgress();
    }

    // Load saved notes
    function loadNotes() {
      const saved = localStorage.getItem('d2-page-notes');
      if (saved) {
        const notes = JSON.parse(saved);
        noteTextareas.forEach(textarea => {
          const page = textarea.dataset.page;
          if (page && notes[page]) {
            textarea.value = notes[page];
          }
        });
      }
    }

    // Update progress bar
    function updateProgress() {
      const checkedCount = Array.from(checkboxes).filter(cb => cb.checked).length;
      const percentage = (checkedCount / totalPages) * 100;

      if (progressBar) {
        progressBar.style.width = `${percentage}%`;
      }

      if (progressText) {
        progressText.textContent = `${checkedCount} of ${totalPages} pages reviewed`;
      }

      // Auto-save on change
      saveProgress();
    }

    // Save progress to localStorage
    function saveProgress() {
      const checkedPages = Array.from(checkboxes)
        .filter(cb => cb.checked)
        .map(cb => cb.dataset.page);
      localStorage.setItem('d2-page-progress', JSON.stringify(checkedPages));
    }

    // Save notes to localStorage
    function saveNotes() {
      const notes: Record<string, string> = {};
      noteTextareas.forEach(textarea => {
        const page = textarea.dataset.page;
        if (page && textarea.value.trim()) {
          notes[page] = textarea.value;
        }
      });
      localStorage.setItem('d2-page-notes', JSON.stringify(notes));
    }

    // Show saved indicator
    function showSavedIndicator(textarea: HTMLTextAreaElement) {
      const indicator = textarea.parentElement?.querySelector('.saved-indicator');
      if (indicator) {
        indicator.classList.remove('hidden');
        setTimeout(() => {
          indicator.classList.add('hidden');
        }, 2000);
      }
    }

    // Export notes as text file
    function exportNotes() {
      const notes: Record<string, string> = {};
      let hasNotes = false;

      noteTextareas.forEach(textarea => {
        const page = textarea.dataset.page;
        if (page && textarea.value.trim()) {
          notes[page] = textarea.value;
          hasNotes = true;
        }
      });

      if (!hasNotes) {
        alert('No notes to export. Add some notes first!');
        return;
      }

      // Create text content
      let content = 'D2 Sanitizers - Page Review Notes\n';
      content += '='.repeat(50) + '\n';
      content += `Generated: ${new Date().toLocaleString()}\n\n`;

      Object.entries(notes).forEach(([page, note]) => {
        content += `Page: ${page}\n`;
        content += '-'.repeat(50) + '\n';
        content += `${note}\n\n`;
      });

      // Create download
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `d2-review-notes-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      // Show confirmation
      const originalText = exportNotesBtn.textContent;
      exportNotesBtn.textContent = '✓ Exported!';
      exportNotesBtn.classList.add('bg-green-600', 'text-white');
      setTimeout(() => {
        exportNotesBtn.textContent = originalText;
        exportNotesBtn.classList.remove('bg-green-600', 'text-white');
      }, 2000);
    }

    // Check all
    checkAllBtn?.addEventListener('click', () => {
      checkboxes.forEach(cb => cb.checked = true);
      updateProgress();
    });

    // Uncheck all
    uncheckAllBtn?.addEventListener('click', () => {
      checkboxes.forEach(cb => cb.checked = false);
      updateProgress();
    });

    // Save progress button
    saveProgressBtn?.addEventListener('click', () => {
      saveProgress();
      saveNotes();
      // Show confirmation
      const originalText = saveProgressBtn.textContent;
      saveProgressBtn.textContent = '✓ Saved!';
      saveProgressBtn.classList.add('bg-green-600');
      setTimeout(() => {
        saveProgressBtn.textContent = originalText;
        saveProgressBtn.classList.remove('bg-green-600');
      }, 2000);
    });

    // Export notes button
    exportNotesBtn?.addEventListener('click', exportNotes);

    // Add change listener to all checkboxes
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateProgress);
    });

    // Add input listener to all note textareas with debounce
    noteTextareas.forEach(textarea => {
      textarea.addEventListener('input', () => {
        const page = textarea.dataset.page;
        if (!page) return;

        // Clear existing timer
        if (noteTimers[page]) {
          clearTimeout(noteTimers[page]);
        }

        // Set new timer to save after 1 second of no typing
        noteTimers[page] = setTimeout(() => {
          saveNotes();
          showSavedIndicator(textarea);
        }, 1000);
      });
    });

    // Initialize
    loadProgress();
    loadNotes();
  });
</script>

<style>
  /* Smooth checkbox animation */
  .page-checkbox {
    transition: all 0.2s ease;
  }

  .page-checkbox:checked {
    background-color: #0071BB;
    border-color: #0071BB;
  }

  /* Print styles */
  @media print {
    .page-checkbox {
      -webkit-appearance: checkbox;
      appearance: checkbox;
    }
  }
</style>